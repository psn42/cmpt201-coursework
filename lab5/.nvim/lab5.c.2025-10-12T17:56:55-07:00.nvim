#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

struct header {
  uint64_t size;
  struct header *next;
  int id;
};

void initialize_block(struct header *block, uint64_t size, struct header *next,
                      int id) {
  block->size = size;
  block->next = next;
  block->id = id;
}

int find_first_fit(struct header *free_list_ptr, uint64_t size) {
  struct header *current = free_list_ptr;

  while (current != NULL) {
    if (current->size >= size) {
      return current->id;
    }
    current = current->next;
  }
  return -1;
}

int find_best_fit(struct header *free_list_ptr, uint64_t size) {
  int best_fit_id = -1;
  uint64_t smallest_sufficient_size = UINT64_MAX;
  struct header *current = free_list_ptr;

  while (current != NULL) {
    if (current->size >= size && current->size < smallest_sufficient_size) {
      smallest_sufficient_size = current->size;
      best_fit_id = current->id;
    }
    current = current->next;
  }

  return best_fit_id;
}

int find_worst_fit(struct header *free_list_ptr, uint64_t size) {
  int worst_fit_id = -1;
  uint64_t largest_sufficient_size = 0;
  struct header *current = free_list_ptr;

  while (current != NULL) {
    if (current->size >= size) {
      if (worst_fit_id == -1 || current->size > largest_sufficient_size) {
        largest_sufficient_size = current->size;
        worst_fit_id = current->id;
      }
    }
    current = current->next;
  }
  return worst_fit_id;
}

int main(void) {

  struct header *free_block1 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block2 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block3 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block4 = (struct header *)malloc(sizeof(struct header));
  struct header *free_block5 = (struct header *)malloc(sizeof(struct header));

  initialize_block(free_block1, 6, free_block2, 1);
  initialize_block(free_block2, 12, free_block3, 2);
  initialize_block(free_block3, 24, free_block4, 3);
  initialize_block(free_block4, 8, free_block5, 4);
  initialize_block(free_block5, 4, NULL, 5);

  struct header *free_list_ptr = free_block1;

  int first_fit_id = find_first_fit(free_list_ptr, 7);
  int best_fit_id = find_best_fit(free_list_ptr, 7);
  int worst_fit_id = find_worst_fit(free_list_ptr, 7);

  if (first_fit_id == -1) {
    printf("The ID for First-Fit algorithm is: No suitable block found\n");
  } else {
    printf("The ID for First-Fit algorithm is: %d\n", first_fit_id);
  }
  if (best_fit_id == -1) {
    printf("The ID for Best-Fit algorithm is: No suitable block found\n");
  } else {
    printf("The ID for Best-Fit algorithm is: %d\n", best_fit_id);
  }
  if (worst_fit_id == -1) {
    printf("The ID for Worst-Fit algorithm is: No suitable block found\n");
  } else {
    printf("The ID for Worst-Fit algorithm is: %d\n", worst_fit_id);
  }

  free(free_block1);
  free(free_block2);
  free(free_block3);
  free(free_block4);
  free(free_block5);

  return 0;
}

/*
 *
 * Algorithm:
 *
 * coalesce(free_list_head, newly_freed_block):
 *
 * 1) If free_list_head is NULL:
 *      free_list_head <- newly_freed_block
 *      newly_freed_block.next <- NULL
 *      return free_lst_head
 *
 * 2) Initialize:
 *    prev <- NULL
 *    current <- free_list_head
 *    merge_with_prev <- FALSE
 *    merge_with_next <- FALSE
 *
 * 3) Traverse the free list to find insertion point:
 *    while current != NULL and current < newly_freed_block:
 *      prev <= current
 *      current <- current.next
 *
 * 4) Check if newly freed block is contiguous with previous block:
 *      if prev != NULL and (address_of(prev) + prev.size) == address_of(newly_freed_block):
 *        merge_with_prev <- TRUE
 *
 * 5) Check if newly freed block is contiguous with next block:
 *      if current != NULL and (address_of(newly_freed_block) + newly_freed_block.size) ==
 *      address_of(newly_freed_block) + newly_freed_block.size) == address_of(current):
 *        merge_with_next <- TRUE
 *
 * 6) Perform coalescing based on merge flags:
 *
 * Case 1: Merge with both prev and next blocks
 *  if merge_with_prev AND merge_with_next:
 *    prev.size <- prev.size + newly_freed_block.size + current.size
 *    prev.next <- current.next
 *
 * Case 2: Merge only with prev block
 * else if merge_with_prev:
 *  prev.size <- prev.size + newly_freed_block.size
 *
 * Case 3: Merge only with next block
 * else if merge_with_next:
 *  newly_freed_block.size <- newly_freed_block.size + current.size
 *  newly_freed_block.next <- curret.next
 *  if prev != NULL:
 *    prev.next <- newly_freed_block
 *  else:
 *    free_list_head <- newly_freed_block
 *
 * Case 4: No merging
 * else:
 *  newly_freed_block.next <- current
 *  if prev != NULL:
 *    prev.next <- newly_freed_block
 *  else:
 *    free_list_head <- newly_freed_block
 * 7) return free_list_head
*/
